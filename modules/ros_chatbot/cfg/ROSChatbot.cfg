#!/usr/bin/env python

##
## Copyright (C) 2017-2025 Hanson Robotics
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <https://www.gnu.org/licenses/>.
##

PACKAGE = 'ros_chatbot'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

character_enum = gen.enum([
        gen.const("Desdemona", str_t, "desi", "Desdemona"),
        gen.const("Grace", str_t, "grace", "Grace"),
        gen.const("Little_Sophia", str_t, "littlesophia", "Little Sophia"),
        gen.const("Mika", str_t, "mika", "Mika"),
        gen.const("Professor_Einstein", str_t, "profeinstein", "Professor Einstein"),
        gen.const("Sophia", str_t, "sophia", "Sophia"),
    ], "Available characters")

gen.add("enable", bool_t, 0, "Enable chatbot", True)
gen.add("hybrid_mode", bool_t, 0, "Hybrid mode", True)
gen.add("enable_rag", bool_t, 0, "Enable RAG", False)
gen.add("enable_global_workspace_drivers", bool_t, 0, "Enable global workspace drivers (experimental)", False)
gen.add("auto_global_workspace", bool_t, 0, "Automatically turn on/off global workspace", False)
gen.add("enable_emotion_driven_response_primer", bool_t, 0, "Enable emotion driven response primer", False)
gen.add("auto_automonous_free_chat", bool_t, 0, "Automatically turn on/off free chat ", False)
gen.add("hybrid_when_idle", int_t, 0, "Seconds before going to hybrid when idle", 90, 15, 180)
gen.add("auto_fire_arf", bool_t, 0, "Automatically fire ARF!", False)

mode_enum = gen.enum([
        gen.const("Auto", str_t, "Auto", "Auto"),
        gen.const("Demo", str_t, "Demo", "Demo"),
        gen.const("Stage", str_t, "Stage", "Stage"),
        gen.const("Undefined", str_t, "Undefined", ""),
    ], "Available robot modes")
gen.add('robot_mode', str_t, 0, "Robot mode", "Stage", edit_method=mode_enum)

gen.add('fast_score', int_t, 60, "The minimum required response score, the smaller the faster", 60, 0, 100)
gen.add("offline_asr_free_chat", bool_t, 0, "Enable offline free chat (This will be auto enabled when there is no internet)", False)
gen.add('listen_speech' , bool_t, 0, "Listen to speech", True)
gen.add('ignore_speech_while_thinking' , bool_t, 0, "In autonomous mode do not respond to text that comes between question and answer", False)
gen.add('concat_multiple_speech' , bool_t, 0, "If speech is heard before answer is returned, concat the utterances until longer pause", False)

gen.add("character", str_t, 0, "Chatbot Character (test)", "sophia", edit_method=character_enum)

gen.add("min_wait_for", double_t, 0, "Wait for minimum time for agents before decision", 0.5, 0.0, 10)
gen.add("timeout", double_t, 0, "Chatbot Timeout Per Batch", 3, 0, 20)

#gen.add("enable_interruption_controller", bool_t, 0, "Enable interruption controller (experimental)", False)
#gen.add('enable_language_switch_controller', bool_t, 0, "Enable Language switch controller (experimental, not in hybrid mode)", False)
#gen.add('enable_emotion_controller', bool_t, 0, "Enable emotion control (experimental)", False)
#gen.add('enable_monitor_controller', bool_t, 0, "Enable event monitor controller (experimental)", False)
#gen.add('enable_responsivity_controller', bool_t, 0, "Enable responsivity controller (experimental)", False)
gen.add('enable_command_controller', bool_t, 0, "Enable command controller (experimental)", True)
#gen.add('enable_user_acquisition_controller', bool_t, 0, "Enable user acquisition controller (experimental)", False)

gen.add('enable_placeholder_utterance_controller', bool_t, 0, "Enable placeholder utterance", False)
gen.add('placeholder_prob_step', double_t, 0, "The incremental step of probability of placeholder utterances (every half second)", 0.07, 0, 1)
gen.add('placeholder_utterances', str_t, 0, "Placeholder utterances (one on a line)", "")
# schema setting for some fields
gen.add("node_schema", str_t, 0, '', '{"placeholder_utterances": {"type": "string","format": "textarea"}}')

# package name, node name, config name
exit(gen.generate(PACKAGE, "ros_chatbot", "ROSChatbot"))
