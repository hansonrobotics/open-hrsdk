# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import conversation_pb2 as conversation__pb2


class ChatServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateConversation = channel.unary_unary(
                '/conversation.ChatService/CreateConversation',
                request_serializer=conversation__pb2.CreateConversationRequest.SerializeToString,
                response_deserializer=conversation__pb2.CreateConversationResponse.FromString,
                )
        self.SendMessage = channel.unary_unary(
                '/conversation.ChatService/SendMessage',
                request_serializer=conversation__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=conversation__pb2.SendMessageResponse.FromString,
                )
        self.StreamConversationMessages = channel.unary_stream(
                '/conversation.ChatService/StreamConversationMessages',
                request_serializer=conversation__pb2.JoinConversationRequest.SerializeToString,
                response_deserializer=conversation__pb2.Message.FromString,
                )
        self.CommitMessage = channel.unary_unary(
                '/conversation.ChatService/CommitMessage',
                request_serializer=conversation__pb2.CommitMessageRequest.SerializeToString,
                response_deserializer=conversation__pb2.CommitMessageResponse.FromString,
                )
        self.GetCharacterTasks = channel.unary_unary(
                '/conversation.ChatService/GetCharacterTasks',
                request_serializer=conversation__pb2.GetCharacterTasksRequest.SerializeToString,
                response_deserializer=conversation__pb2.GetCharacterTasksResponse.FromString,
                )
        self.CompleteCharacterTask = channel.unary_unary(
                '/conversation.ChatService/CompleteCharacterTask',
                request_serializer=conversation__pb2.CompleteCharacterTaskRequest.SerializeToString,
                response_deserializer=conversation__pb2.CompleteCharacterTaskResponse.FromString,
                )
        self.CreateCharacterNeed = channel.unary_unary(
                '/conversation.ChatService/CreateCharacterNeed',
                request_serializer=conversation__pb2.CreateCharacterNeedRequest.SerializeToString,
                response_deserializer=conversation__pb2.CreateCharacterNeedResponse.FromString,
                )
        self.CreateCharacter = channel.unary_unary(
                '/conversation.ChatService/CreateCharacter',
                request_serializer=conversation__pb2.CreateCharacterRequest.SerializeToString,
                response_deserializer=conversation__pb2.CreateCharacterResponse.FromString,
                )
        self.GetCharacter = channel.unary_unary(
                '/conversation.ChatService/GetCharacter',
                request_serializer=conversation__pb2.GetCharacterRequest.SerializeToString,
                response_deserializer=conversation__pb2.GetCharacterResponse.FromString,
                )
        self.UpdateCharacter = channel.unary_unary(
                '/conversation.ChatService/UpdateCharacter',
                request_serializer=conversation__pb2.UpdateCharacterRequest.SerializeToString,
                response_deserializer=conversation__pb2.UpdateCharacterResponse.FromString,
                )
        self.DeleteCharacter = channel.unary_unary(
                '/conversation.ChatService/DeleteCharacter',
                request_serializer=conversation__pb2.DeleteCharacterRequest.SerializeToString,
                response_deserializer=conversation__pb2.DeleteCharacterResponse.FromString,
                )
        self.ListCharacters = channel.unary_unary(
                '/conversation.ChatService/ListCharacters',
                request_serializer=conversation__pb2.ListCharactersRequest.SerializeToString,
                response_deserializer=conversation__pb2.ListCharactersResponse.FromString,
                )
        self.CreatePlayer = channel.unary_unary(
                '/conversation.ChatService/CreatePlayer',
                request_serializer=conversation__pb2.CreatePlayerRequest.SerializeToString,
                response_deserializer=conversation__pb2.CreatePlayerResponse.FromString,
                )
        self.GetPlayer = channel.unary_unary(
                '/conversation.ChatService/GetPlayer',
                request_serializer=conversation__pb2.GetPlayerRequest.SerializeToString,
                response_deserializer=conversation__pb2.GetPlayerResponse.FromString,
                )
        self.UpdatePlayer = channel.unary_unary(
                '/conversation.ChatService/UpdatePlayer',
                request_serializer=conversation__pb2.UpdatePlayerRequest.SerializeToString,
                response_deserializer=conversation__pb2.UpdatePlayerResponse.FromString,
                )
        self.DeletePlayer = channel.unary_unary(
                '/conversation.ChatService/DeletePlayer',
                request_serializer=conversation__pb2.DeletePlayerRequest.SerializeToString,
                response_deserializer=conversation__pb2.DeletePlayerResponse.FromString,
                )
        self.ListPlayers = channel.unary_unary(
                '/conversation.ChatService/ListPlayers',
                request_serializer=conversation__pb2.ListPlayersRequest.SerializeToString,
                response_deserializer=conversation__pb2.ListPlayersResponse.FromString,
                )
        self.CreatePromptSet = channel.unary_unary(
                '/conversation.ChatService/CreatePromptSet',
                request_serializer=conversation__pb2.CreatePromptSetRequest.SerializeToString,
                response_deserializer=conversation__pb2.CreatePromptSetResponse.FromString,
                )
        self.GetPromptSet = channel.unary_unary(
                '/conversation.ChatService/GetPromptSet',
                request_serializer=conversation__pb2.GetPromptSetRequest.SerializeToString,
                response_deserializer=conversation__pb2.GetPromptSetResponse.FromString,
                )
        self.UpdatePromptSet = channel.unary_unary(
                '/conversation.ChatService/UpdatePromptSet',
                request_serializer=conversation__pb2.UpdatePromptSetRequest.SerializeToString,
                response_deserializer=conversation__pb2.UpdatePromptSetResponse.FromString,
                )
        self.DeletePromptSet = channel.unary_unary(
                '/conversation.ChatService/DeletePromptSet',
                request_serializer=conversation__pb2.DeletePromptSetRequest.SerializeToString,
                response_deserializer=conversation__pb2.DeletePromptSetResponse.FromString,
                )
        self.ListPromptSets = channel.unary_unary(
                '/conversation.ChatService/ListPromptSets',
                request_serializer=conversation__pb2.ListPromptSetsRequest.SerializeToString,
                response_deserializer=conversation__pb2.ListPromptSetsResponse.FromString,
                )
        self.CreatePrompt = channel.unary_unary(
                '/conversation.ChatService/CreatePrompt',
                request_serializer=conversation__pb2.CreatePromptRequest.SerializeToString,
                response_deserializer=conversation__pb2.CreatePromptResponse.FromString,
                )
        self.GetPrompt = channel.unary_unary(
                '/conversation.ChatService/GetPrompt',
                request_serializer=conversation__pb2.GetPromptRequest.SerializeToString,
                response_deserializer=conversation__pb2.GetPromptResponse.FromString,
                )
        self.UpdatePrompt = channel.unary_unary(
                '/conversation.ChatService/UpdatePrompt',
                request_serializer=conversation__pb2.UpdatePromptRequest.SerializeToString,
                response_deserializer=conversation__pb2.UpdatePromptResponse.FromString,
                )
        self.DeletePrompt = channel.unary_unary(
                '/conversation.ChatService/DeletePrompt',
                request_serializer=conversation__pb2.DeletePromptRequest.SerializeToString,
                response_deserializer=conversation__pb2.DeletePromptResponse.FromString,
                )
        self.ListPrompts = channel.unary_unary(
                '/conversation.ChatService/ListPrompts',
                request_serializer=conversation__pb2.ListPromptsRequest.SerializeToString,
                response_deserializer=conversation__pb2.ListPromptsResponse.FromString,
                )
        self.CreatePrimerSet = channel.unary_unary(
                '/conversation.ChatService/CreatePrimerSet',
                request_serializer=conversation__pb2.CreatePrimerSetRequest.SerializeToString,
                response_deserializer=conversation__pb2.CreatePrimerSetResponse.FromString,
                )
        self.GetPrimerSet = channel.unary_unary(
                '/conversation.ChatService/GetPrimerSet',
                request_serializer=conversation__pb2.GetPrimerSetRequest.SerializeToString,
                response_deserializer=conversation__pb2.GetPrimerSetResponse.FromString,
                )
        self.UpdatePrimerSet = channel.unary_unary(
                '/conversation.ChatService/UpdatePrimerSet',
                request_serializer=conversation__pb2.UpdatePrimerSetRequest.SerializeToString,
                response_deserializer=conversation__pb2.UpdatePrimerSetResponse.FromString,
                )
        self.DeletePrimerSet = channel.unary_unary(
                '/conversation.ChatService/DeletePrimerSet',
                request_serializer=conversation__pb2.DeletePrimerSetRequest.SerializeToString,
                response_deserializer=conversation__pb2.DeletePrimerSetResponse.FromString,
                )
        self.ListPrimerSets = channel.unary_unary(
                '/conversation.ChatService/ListPrimerSets',
                request_serializer=conversation__pb2.ListPrimerSetsRequest.SerializeToString,
                response_deserializer=conversation__pb2.ListPrimerSetsResponse.FromString,
                )
        self.CreatePrimer = channel.unary_unary(
                '/conversation.ChatService/CreatePrimer',
                request_serializer=conversation__pb2.CreatePrimerRequest.SerializeToString,
                response_deserializer=conversation__pb2.CreatePrimerResponse.FromString,
                )
        self.GetPrimer = channel.unary_unary(
                '/conversation.ChatService/GetPrimer',
                request_serializer=conversation__pb2.GetPrimerRequest.SerializeToString,
                response_deserializer=conversation__pb2.GetPrimerResponse.FromString,
                )
        self.UpdatePrimer = channel.unary_unary(
                '/conversation.ChatService/UpdatePrimer',
                request_serializer=conversation__pb2.UpdatePrimerRequest.SerializeToString,
                response_deserializer=conversation__pb2.UpdatePrimerResponse.FromString,
                )
        self.DeletePrimer = channel.unary_unary(
                '/conversation.ChatService/DeletePrimer',
                request_serializer=conversation__pb2.DeletePrimerRequest.SerializeToString,
                response_deserializer=conversation__pb2.DeletePrimerResponse.FromString,
                )
        self.ListPrimers = channel.unary_unary(
                '/conversation.ChatService/ListPrimers',
                request_serializer=conversation__pb2.ListPrimersRequest.SerializeToString,
                response_deserializer=conversation__pb2.ListPrimersResponse.FromString,
                )
        self.CreateEmotionalRulesSet = channel.unary_unary(
                '/conversation.ChatService/CreateEmotionalRulesSet',
                request_serializer=conversation__pb2.CreateEmotionalRulesSetRequest.SerializeToString,
                response_deserializer=conversation__pb2.CreateEmotionalRulesSetResponse.FromString,
                )
        self.GetEmotionalRulesSet = channel.unary_unary(
                '/conversation.ChatService/GetEmotionalRulesSet',
                request_serializer=conversation__pb2.GetEmotionalRulesSetRequest.SerializeToString,
                response_deserializer=conversation__pb2.GetEmotionalRulesSetResponse.FromString,
                )
        self.UpdateEmotionalRulesSet = channel.unary_unary(
                '/conversation.ChatService/UpdateEmotionalRulesSet',
                request_serializer=conversation__pb2.UpdateEmotionalRulesSetRequest.SerializeToString,
                response_deserializer=conversation__pb2.UpdateEmotionalRulesSetResponse.FromString,
                )
        self.DeleteEmotionalRulesSet = channel.unary_unary(
                '/conversation.ChatService/DeleteEmotionalRulesSet',
                request_serializer=conversation__pb2.DeleteEmotionalRulesSetRequest.SerializeToString,
                response_deserializer=conversation__pb2.DeleteEmotionalRulesSetResponse.FromString,
                )
        self.ListEmotionalRulesSets = channel.unary_unary(
                '/conversation.ChatService/ListEmotionalRulesSets',
                request_serializer=conversation__pb2.ListEmotionalRulesSetsRequest.SerializeToString,
                response_deserializer=conversation__pb2.ListEmotionalRulesSetsResponse.FromString,
                )
        self.CreateEmotionalRule = channel.unary_unary(
                '/conversation.ChatService/CreateEmotionalRule',
                request_serializer=conversation__pb2.CreateEmotionalRuleRequest.SerializeToString,
                response_deserializer=conversation__pb2.CreateEmotionalRuleResponse.FromString,
                )
        self.GetEmotionalRule = channel.unary_unary(
                '/conversation.ChatService/GetEmotionalRule',
                request_serializer=conversation__pb2.GetEmotionalRuleRequest.SerializeToString,
                response_deserializer=conversation__pb2.GetEmotionalRuleResponse.FromString,
                )
        self.UpdateEmotionalRule = channel.unary_unary(
                '/conversation.ChatService/UpdateEmotionalRule',
                request_serializer=conversation__pb2.UpdateEmotionalRuleRequest.SerializeToString,
                response_deserializer=conversation__pb2.UpdateEmotionalRuleResponse.FromString,
                )
        self.DeleteEmotionalRule = channel.unary_unary(
                '/conversation.ChatService/DeleteEmotionalRule',
                request_serializer=conversation__pb2.DeleteEmotionalRuleRequest.SerializeToString,
                response_deserializer=conversation__pb2.DeleteEmotionalRuleResponse.FromString,
                )
        self.ListEmotionalRules = channel.unary_unary(
                '/conversation.ChatService/ListEmotionalRules',
                request_serializer=conversation__pb2.ListEmotionalRuleRequest.SerializeToString,
                response_deserializer=conversation__pb2.ListEmotionalRuleResponse.FromString,
                )
        self.CreateGenerationConfig = channel.unary_unary(
                '/conversation.ChatService/CreateGenerationConfig',
                request_serializer=conversation__pb2.CreateGenerationConfigRequest.SerializeToString,
                response_deserializer=conversation__pb2.CreateGenerationConfigResponse.FromString,
                )
        self.GetGenerationConfig = channel.unary_unary(
                '/conversation.ChatService/GetGenerationConfig',
                request_serializer=conversation__pb2.GetGenerationConfigRequest.SerializeToString,
                response_deserializer=conversation__pb2.GetGenerationConfigResponse.FromString,
                )
        self.UpdateGenerationConfig = channel.unary_unary(
                '/conversation.ChatService/UpdateGenerationConfig',
                request_serializer=conversation__pb2.UpdateGenerationConfigRequest.SerializeToString,
                response_deserializer=conversation__pb2.UpdateGenerationConfigResponse.FromString,
                )
        self.DeleteGenerationConfig = channel.unary_unary(
                '/conversation.ChatService/DeleteGenerationConfig',
                request_serializer=conversation__pb2.DeleteGenerationConfigRequest.SerializeToString,
                response_deserializer=conversation__pb2.DeleteGenerationConfigResponse.FromString,
                )
        self.ListGenerationConfigs = channel.unary_unary(
                '/conversation.ChatService/ListGenerationConfigs',
                request_serializer=conversation__pb2.ListGenerationConfigsRequest.SerializeToString,
                response_deserializer=conversation__pb2.ListGenerationConfigsResponse.FromString,
                )
        self.CreateEmotion = channel.unary_unary(
                '/conversation.ChatService/CreateEmotion',
                request_serializer=conversation__pb2.CreateEmotionRequest.SerializeToString,
                response_deserializer=conversation__pb2.CreateEmotionResponse.FromString,
                )
        self.GetEmotion = channel.unary_unary(
                '/conversation.ChatService/GetEmotion',
                request_serializer=conversation__pb2.GetEmotionRequest.SerializeToString,
                response_deserializer=conversation__pb2.GetEmotionResponse.FromString,
                )
        self.UpdateEmotion = channel.unary_unary(
                '/conversation.ChatService/UpdateEmotion',
                request_serializer=conversation__pb2.UpdateEmotionRequest.SerializeToString,
                response_deserializer=conversation__pb2.UpdateEmotionResponse.FromString,
                )
        self.DeleteEmotion = channel.unary_unary(
                '/conversation.ChatService/DeleteEmotion',
                request_serializer=conversation__pb2.DeleteEmotionRequest.SerializeToString,
                response_deserializer=conversation__pb2.DeleteEmotionResponse.FromString,
                )
        self.ListEmotions = channel.unary_unary(
                '/conversation.ChatService/ListEmotions',
                request_serializer=conversation__pb2.ListEmotionsRequest.SerializeToString,
                response_deserializer=conversation__pb2.ListEmotionsResponse.FromString,
                )


class ChatServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateConversation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamConversationMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommitMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCharacterTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompleteCharacterTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCharacterNeed(self, request, context):
        """PROBLEM: CREATE HOW?? FOR CHARACTER ID OR CHARACTER TYPE??
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCharacter(self, request, context):
        """rpc GetCharacterLocation(GetCharacterLocationRequest) returns (GetCharacterLocationResponse);
        rpc SetCharacterLocation(SetCharacterLocationRequest) returns (SetCharacterLocationResponse);
        rpc SetCharacterVitalStatus(SetCharacterVitalStatusRequest) returns (SetCharacterVitalStatusResponse);
        rpc SetItemLocation(SetItemLocationRequest) returns (SetItemLocationResponse);

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCharacter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCharacter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCharacter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCharacters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePlayer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPlayer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePlayer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePlayer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPlayers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePromptSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPromptSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePromptSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePromptSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPromptSets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePrompt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrompt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePrompt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePrompt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPrompts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePrimerSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrimerSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePrimerSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePrimerSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPrimerSets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePrimer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrimer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePrimer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePrimer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPrimers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateEmotionalRulesSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEmotionalRulesSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEmotionalRulesSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteEmotionalRulesSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListEmotionalRulesSets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateEmotionalRule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEmotionalRule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEmotionalRule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteEmotionalRule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListEmotionalRules(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateGenerationConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGenerationConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateGenerationConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteGenerationConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListGenerationConfigs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateEmotion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEmotion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEmotion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteEmotion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListEmotions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateConversation': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateConversation,
                    request_deserializer=conversation__pb2.CreateConversationRequest.FromString,
                    response_serializer=conversation__pb2.CreateConversationResponse.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=conversation__pb2.SendMessageRequest.FromString,
                    response_serializer=conversation__pb2.SendMessageResponse.SerializeToString,
            ),
            'StreamConversationMessages': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamConversationMessages,
                    request_deserializer=conversation__pb2.JoinConversationRequest.FromString,
                    response_serializer=conversation__pb2.Message.SerializeToString,
            ),
            'CommitMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.CommitMessage,
                    request_deserializer=conversation__pb2.CommitMessageRequest.FromString,
                    response_serializer=conversation__pb2.CommitMessageResponse.SerializeToString,
            ),
            'GetCharacterTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCharacterTasks,
                    request_deserializer=conversation__pb2.GetCharacterTasksRequest.FromString,
                    response_serializer=conversation__pb2.GetCharacterTasksResponse.SerializeToString,
            ),
            'CompleteCharacterTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CompleteCharacterTask,
                    request_deserializer=conversation__pb2.CompleteCharacterTaskRequest.FromString,
                    response_serializer=conversation__pb2.CompleteCharacterTaskResponse.SerializeToString,
            ),
            'CreateCharacterNeed': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCharacterNeed,
                    request_deserializer=conversation__pb2.CreateCharacterNeedRequest.FromString,
                    response_serializer=conversation__pb2.CreateCharacterNeedResponse.SerializeToString,
            ),
            'CreateCharacter': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCharacter,
                    request_deserializer=conversation__pb2.CreateCharacterRequest.FromString,
                    response_serializer=conversation__pb2.CreateCharacterResponse.SerializeToString,
            ),
            'GetCharacter': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCharacter,
                    request_deserializer=conversation__pb2.GetCharacterRequest.FromString,
                    response_serializer=conversation__pb2.GetCharacterResponse.SerializeToString,
            ),
            'UpdateCharacter': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCharacter,
                    request_deserializer=conversation__pb2.UpdateCharacterRequest.FromString,
                    response_serializer=conversation__pb2.UpdateCharacterResponse.SerializeToString,
            ),
            'DeleteCharacter': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCharacter,
                    request_deserializer=conversation__pb2.DeleteCharacterRequest.FromString,
                    response_serializer=conversation__pb2.DeleteCharacterResponse.SerializeToString,
            ),
            'ListCharacters': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCharacters,
                    request_deserializer=conversation__pb2.ListCharactersRequest.FromString,
                    response_serializer=conversation__pb2.ListCharactersResponse.SerializeToString,
            ),
            'CreatePlayer': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePlayer,
                    request_deserializer=conversation__pb2.CreatePlayerRequest.FromString,
                    response_serializer=conversation__pb2.CreatePlayerResponse.SerializeToString,
            ),
            'GetPlayer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPlayer,
                    request_deserializer=conversation__pb2.GetPlayerRequest.FromString,
                    response_serializer=conversation__pb2.GetPlayerResponse.SerializeToString,
            ),
            'UpdatePlayer': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePlayer,
                    request_deserializer=conversation__pb2.UpdatePlayerRequest.FromString,
                    response_serializer=conversation__pb2.UpdatePlayerResponse.SerializeToString,
            ),
            'DeletePlayer': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePlayer,
                    request_deserializer=conversation__pb2.DeletePlayerRequest.FromString,
                    response_serializer=conversation__pb2.DeletePlayerResponse.SerializeToString,
            ),
            'ListPlayers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPlayers,
                    request_deserializer=conversation__pb2.ListPlayersRequest.FromString,
                    response_serializer=conversation__pb2.ListPlayersResponse.SerializeToString,
            ),
            'CreatePromptSet': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePromptSet,
                    request_deserializer=conversation__pb2.CreatePromptSetRequest.FromString,
                    response_serializer=conversation__pb2.CreatePromptSetResponse.SerializeToString,
            ),
            'GetPromptSet': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPromptSet,
                    request_deserializer=conversation__pb2.GetPromptSetRequest.FromString,
                    response_serializer=conversation__pb2.GetPromptSetResponse.SerializeToString,
            ),
            'UpdatePromptSet': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePromptSet,
                    request_deserializer=conversation__pb2.UpdatePromptSetRequest.FromString,
                    response_serializer=conversation__pb2.UpdatePromptSetResponse.SerializeToString,
            ),
            'DeletePromptSet': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePromptSet,
                    request_deserializer=conversation__pb2.DeletePromptSetRequest.FromString,
                    response_serializer=conversation__pb2.DeletePromptSetResponse.SerializeToString,
            ),
            'ListPromptSets': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPromptSets,
                    request_deserializer=conversation__pb2.ListPromptSetsRequest.FromString,
                    response_serializer=conversation__pb2.ListPromptSetsResponse.SerializeToString,
            ),
            'CreatePrompt': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePrompt,
                    request_deserializer=conversation__pb2.CreatePromptRequest.FromString,
                    response_serializer=conversation__pb2.CreatePromptResponse.SerializeToString,
            ),
            'GetPrompt': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrompt,
                    request_deserializer=conversation__pb2.GetPromptRequest.FromString,
                    response_serializer=conversation__pb2.GetPromptResponse.SerializeToString,
            ),
            'UpdatePrompt': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePrompt,
                    request_deserializer=conversation__pb2.UpdatePromptRequest.FromString,
                    response_serializer=conversation__pb2.UpdatePromptResponse.SerializeToString,
            ),
            'DeletePrompt': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePrompt,
                    request_deserializer=conversation__pb2.DeletePromptRequest.FromString,
                    response_serializer=conversation__pb2.DeletePromptResponse.SerializeToString,
            ),
            'ListPrompts': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPrompts,
                    request_deserializer=conversation__pb2.ListPromptsRequest.FromString,
                    response_serializer=conversation__pb2.ListPromptsResponse.SerializeToString,
            ),
            'CreatePrimerSet': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePrimerSet,
                    request_deserializer=conversation__pb2.CreatePrimerSetRequest.FromString,
                    response_serializer=conversation__pb2.CreatePrimerSetResponse.SerializeToString,
            ),
            'GetPrimerSet': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrimerSet,
                    request_deserializer=conversation__pb2.GetPrimerSetRequest.FromString,
                    response_serializer=conversation__pb2.GetPrimerSetResponse.SerializeToString,
            ),
            'UpdatePrimerSet': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePrimerSet,
                    request_deserializer=conversation__pb2.UpdatePrimerSetRequest.FromString,
                    response_serializer=conversation__pb2.UpdatePrimerSetResponse.SerializeToString,
            ),
            'DeletePrimerSet': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePrimerSet,
                    request_deserializer=conversation__pb2.DeletePrimerSetRequest.FromString,
                    response_serializer=conversation__pb2.DeletePrimerSetResponse.SerializeToString,
            ),
            'ListPrimerSets': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPrimerSets,
                    request_deserializer=conversation__pb2.ListPrimerSetsRequest.FromString,
                    response_serializer=conversation__pb2.ListPrimerSetsResponse.SerializeToString,
            ),
            'CreatePrimer': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePrimer,
                    request_deserializer=conversation__pb2.CreatePrimerRequest.FromString,
                    response_serializer=conversation__pb2.CreatePrimerResponse.SerializeToString,
            ),
            'GetPrimer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrimer,
                    request_deserializer=conversation__pb2.GetPrimerRequest.FromString,
                    response_serializer=conversation__pb2.GetPrimerResponse.SerializeToString,
            ),
            'UpdatePrimer': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePrimer,
                    request_deserializer=conversation__pb2.UpdatePrimerRequest.FromString,
                    response_serializer=conversation__pb2.UpdatePrimerResponse.SerializeToString,
            ),
            'DeletePrimer': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePrimer,
                    request_deserializer=conversation__pb2.DeletePrimerRequest.FromString,
                    response_serializer=conversation__pb2.DeletePrimerResponse.SerializeToString,
            ),
            'ListPrimers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPrimers,
                    request_deserializer=conversation__pb2.ListPrimersRequest.FromString,
                    response_serializer=conversation__pb2.ListPrimersResponse.SerializeToString,
            ),
            'CreateEmotionalRulesSet': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateEmotionalRulesSet,
                    request_deserializer=conversation__pb2.CreateEmotionalRulesSetRequest.FromString,
                    response_serializer=conversation__pb2.CreateEmotionalRulesSetResponse.SerializeToString,
            ),
            'GetEmotionalRulesSet': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEmotionalRulesSet,
                    request_deserializer=conversation__pb2.GetEmotionalRulesSetRequest.FromString,
                    response_serializer=conversation__pb2.GetEmotionalRulesSetResponse.SerializeToString,
            ),
            'UpdateEmotionalRulesSet': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEmotionalRulesSet,
                    request_deserializer=conversation__pb2.UpdateEmotionalRulesSetRequest.FromString,
                    response_serializer=conversation__pb2.UpdateEmotionalRulesSetResponse.SerializeToString,
            ),
            'DeleteEmotionalRulesSet': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteEmotionalRulesSet,
                    request_deserializer=conversation__pb2.DeleteEmotionalRulesSetRequest.FromString,
                    response_serializer=conversation__pb2.DeleteEmotionalRulesSetResponse.SerializeToString,
            ),
            'ListEmotionalRulesSets': grpc.unary_unary_rpc_method_handler(
                    servicer.ListEmotionalRulesSets,
                    request_deserializer=conversation__pb2.ListEmotionalRulesSetsRequest.FromString,
                    response_serializer=conversation__pb2.ListEmotionalRulesSetsResponse.SerializeToString,
            ),
            'CreateEmotionalRule': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateEmotionalRule,
                    request_deserializer=conversation__pb2.CreateEmotionalRuleRequest.FromString,
                    response_serializer=conversation__pb2.CreateEmotionalRuleResponse.SerializeToString,
            ),
            'GetEmotionalRule': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEmotionalRule,
                    request_deserializer=conversation__pb2.GetEmotionalRuleRequest.FromString,
                    response_serializer=conversation__pb2.GetEmotionalRuleResponse.SerializeToString,
            ),
            'UpdateEmotionalRule': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEmotionalRule,
                    request_deserializer=conversation__pb2.UpdateEmotionalRuleRequest.FromString,
                    response_serializer=conversation__pb2.UpdateEmotionalRuleResponse.SerializeToString,
            ),
            'DeleteEmotionalRule': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteEmotionalRule,
                    request_deserializer=conversation__pb2.DeleteEmotionalRuleRequest.FromString,
                    response_serializer=conversation__pb2.DeleteEmotionalRuleResponse.SerializeToString,
            ),
            'ListEmotionalRules': grpc.unary_unary_rpc_method_handler(
                    servicer.ListEmotionalRules,
                    request_deserializer=conversation__pb2.ListEmotionalRuleRequest.FromString,
                    response_serializer=conversation__pb2.ListEmotionalRuleResponse.SerializeToString,
            ),
            'CreateGenerationConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGenerationConfig,
                    request_deserializer=conversation__pb2.CreateGenerationConfigRequest.FromString,
                    response_serializer=conversation__pb2.CreateGenerationConfigResponse.SerializeToString,
            ),
            'GetGenerationConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGenerationConfig,
                    request_deserializer=conversation__pb2.GetGenerationConfigRequest.FromString,
                    response_serializer=conversation__pb2.GetGenerationConfigResponse.SerializeToString,
            ),
            'UpdateGenerationConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateGenerationConfig,
                    request_deserializer=conversation__pb2.UpdateGenerationConfigRequest.FromString,
                    response_serializer=conversation__pb2.UpdateGenerationConfigResponse.SerializeToString,
            ),
            'DeleteGenerationConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteGenerationConfig,
                    request_deserializer=conversation__pb2.DeleteGenerationConfigRequest.FromString,
                    response_serializer=conversation__pb2.DeleteGenerationConfigResponse.SerializeToString,
            ),
            'ListGenerationConfigs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListGenerationConfigs,
                    request_deserializer=conversation__pb2.ListGenerationConfigsRequest.FromString,
                    response_serializer=conversation__pb2.ListGenerationConfigsResponse.SerializeToString,
            ),
            'CreateEmotion': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateEmotion,
                    request_deserializer=conversation__pb2.CreateEmotionRequest.FromString,
                    response_serializer=conversation__pb2.CreateEmotionResponse.SerializeToString,
            ),
            'GetEmotion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEmotion,
                    request_deserializer=conversation__pb2.GetEmotionRequest.FromString,
                    response_serializer=conversation__pb2.GetEmotionResponse.SerializeToString,
            ),
            'UpdateEmotion': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEmotion,
                    request_deserializer=conversation__pb2.UpdateEmotionRequest.FromString,
                    response_serializer=conversation__pb2.UpdateEmotionResponse.SerializeToString,
            ),
            'DeleteEmotion': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteEmotion,
                    request_deserializer=conversation__pb2.DeleteEmotionRequest.FromString,
                    response_serializer=conversation__pb2.DeleteEmotionResponse.SerializeToString,
            ),
            'ListEmotions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListEmotions,
                    request_deserializer=conversation__pb2.ListEmotionsRequest.FromString,
                    response_serializer=conversation__pb2.ListEmotionsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'conversation.ChatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChatService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateConversation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/CreateConversation',
            conversation__pb2.CreateConversationRequest.SerializeToString,
            conversation__pb2.CreateConversationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/SendMessage',
            conversation__pb2.SendMessageRequest.SerializeToString,
            conversation__pb2.SendMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamConversationMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/conversation.ChatService/StreamConversationMessages',
            conversation__pb2.JoinConversationRequest.SerializeToString,
            conversation__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CommitMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/CommitMessage',
            conversation__pb2.CommitMessageRequest.SerializeToString,
            conversation__pb2.CommitMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCharacterTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/GetCharacterTasks',
            conversation__pb2.GetCharacterTasksRequest.SerializeToString,
            conversation__pb2.GetCharacterTasksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CompleteCharacterTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/CompleteCharacterTask',
            conversation__pb2.CompleteCharacterTaskRequest.SerializeToString,
            conversation__pb2.CompleteCharacterTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateCharacterNeed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/CreateCharacterNeed',
            conversation__pb2.CreateCharacterNeedRequest.SerializeToString,
            conversation__pb2.CreateCharacterNeedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateCharacter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/CreateCharacter',
            conversation__pb2.CreateCharacterRequest.SerializeToString,
            conversation__pb2.CreateCharacterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCharacter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/GetCharacter',
            conversation__pb2.GetCharacterRequest.SerializeToString,
            conversation__pb2.GetCharacterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateCharacter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/UpdateCharacter',
            conversation__pb2.UpdateCharacterRequest.SerializeToString,
            conversation__pb2.UpdateCharacterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteCharacter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/DeleteCharacter',
            conversation__pb2.DeleteCharacterRequest.SerializeToString,
            conversation__pb2.DeleteCharacterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListCharacters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/ListCharacters',
            conversation__pb2.ListCharactersRequest.SerializeToString,
            conversation__pb2.ListCharactersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreatePlayer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/CreatePlayer',
            conversation__pb2.CreatePlayerRequest.SerializeToString,
            conversation__pb2.CreatePlayerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPlayer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/GetPlayer',
            conversation__pb2.GetPlayerRequest.SerializeToString,
            conversation__pb2.GetPlayerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdatePlayer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/UpdatePlayer',
            conversation__pb2.UpdatePlayerRequest.SerializeToString,
            conversation__pb2.UpdatePlayerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeletePlayer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/DeletePlayer',
            conversation__pb2.DeletePlayerRequest.SerializeToString,
            conversation__pb2.DeletePlayerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListPlayers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/ListPlayers',
            conversation__pb2.ListPlayersRequest.SerializeToString,
            conversation__pb2.ListPlayersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreatePromptSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/CreatePromptSet',
            conversation__pb2.CreatePromptSetRequest.SerializeToString,
            conversation__pb2.CreatePromptSetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPromptSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/GetPromptSet',
            conversation__pb2.GetPromptSetRequest.SerializeToString,
            conversation__pb2.GetPromptSetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdatePromptSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/UpdatePromptSet',
            conversation__pb2.UpdatePromptSetRequest.SerializeToString,
            conversation__pb2.UpdatePromptSetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeletePromptSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/DeletePromptSet',
            conversation__pb2.DeletePromptSetRequest.SerializeToString,
            conversation__pb2.DeletePromptSetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListPromptSets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/ListPromptSets',
            conversation__pb2.ListPromptSetsRequest.SerializeToString,
            conversation__pb2.ListPromptSetsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreatePrompt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/CreatePrompt',
            conversation__pb2.CreatePromptRequest.SerializeToString,
            conversation__pb2.CreatePromptResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPrompt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/GetPrompt',
            conversation__pb2.GetPromptRequest.SerializeToString,
            conversation__pb2.GetPromptResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdatePrompt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/UpdatePrompt',
            conversation__pb2.UpdatePromptRequest.SerializeToString,
            conversation__pb2.UpdatePromptResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeletePrompt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/DeletePrompt',
            conversation__pb2.DeletePromptRequest.SerializeToString,
            conversation__pb2.DeletePromptResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListPrompts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/ListPrompts',
            conversation__pb2.ListPromptsRequest.SerializeToString,
            conversation__pb2.ListPromptsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreatePrimerSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/CreatePrimerSet',
            conversation__pb2.CreatePrimerSetRequest.SerializeToString,
            conversation__pb2.CreatePrimerSetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPrimerSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/GetPrimerSet',
            conversation__pb2.GetPrimerSetRequest.SerializeToString,
            conversation__pb2.GetPrimerSetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdatePrimerSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/UpdatePrimerSet',
            conversation__pb2.UpdatePrimerSetRequest.SerializeToString,
            conversation__pb2.UpdatePrimerSetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeletePrimerSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/DeletePrimerSet',
            conversation__pb2.DeletePrimerSetRequest.SerializeToString,
            conversation__pb2.DeletePrimerSetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListPrimerSets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/ListPrimerSets',
            conversation__pb2.ListPrimerSetsRequest.SerializeToString,
            conversation__pb2.ListPrimerSetsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreatePrimer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/CreatePrimer',
            conversation__pb2.CreatePrimerRequest.SerializeToString,
            conversation__pb2.CreatePrimerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPrimer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/GetPrimer',
            conversation__pb2.GetPrimerRequest.SerializeToString,
            conversation__pb2.GetPrimerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdatePrimer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/UpdatePrimer',
            conversation__pb2.UpdatePrimerRequest.SerializeToString,
            conversation__pb2.UpdatePrimerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeletePrimer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/DeletePrimer',
            conversation__pb2.DeletePrimerRequest.SerializeToString,
            conversation__pb2.DeletePrimerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListPrimers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/ListPrimers',
            conversation__pb2.ListPrimersRequest.SerializeToString,
            conversation__pb2.ListPrimersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateEmotionalRulesSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/CreateEmotionalRulesSet',
            conversation__pb2.CreateEmotionalRulesSetRequest.SerializeToString,
            conversation__pb2.CreateEmotionalRulesSetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEmotionalRulesSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/GetEmotionalRulesSet',
            conversation__pb2.GetEmotionalRulesSetRequest.SerializeToString,
            conversation__pb2.GetEmotionalRulesSetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateEmotionalRulesSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/UpdateEmotionalRulesSet',
            conversation__pb2.UpdateEmotionalRulesSetRequest.SerializeToString,
            conversation__pb2.UpdateEmotionalRulesSetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteEmotionalRulesSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/DeleteEmotionalRulesSet',
            conversation__pb2.DeleteEmotionalRulesSetRequest.SerializeToString,
            conversation__pb2.DeleteEmotionalRulesSetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListEmotionalRulesSets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/ListEmotionalRulesSets',
            conversation__pb2.ListEmotionalRulesSetsRequest.SerializeToString,
            conversation__pb2.ListEmotionalRulesSetsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateEmotionalRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/CreateEmotionalRule',
            conversation__pb2.CreateEmotionalRuleRequest.SerializeToString,
            conversation__pb2.CreateEmotionalRuleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEmotionalRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/GetEmotionalRule',
            conversation__pb2.GetEmotionalRuleRequest.SerializeToString,
            conversation__pb2.GetEmotionalRuleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateEmotionalRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/UpdateEmotionalRule',
            conversation__pb2.UpdateEmotionalRuleRequest.SerializeToString,
            conversation__pb2.UpdateEmotionalRuleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteEmotionalRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/DeleteEmotionalRule',
            conversation__pb2.DeleteEmotionalRuleRequest.SerializeToString,
            conversation__pb2.DeleteEmotionalRuleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListEmotionalRules(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/ListEmotionalRules',
            conversation__pb2.ListEmotionalRuleRequest.SerializeToString,
            conversation__pb2.ListEmotionalRuleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateGenerationConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/CreateGenerationConfig',
            conversation__pb2.CreateGenerationConfigRequest.SerializeToString,
            conversation__pb2.CreateGenerationConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGenerationConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/GetGenerationConfig',
            conversation__pb2.GetGenerationConfigRequest.SerializeToString,
            conversation__pb2.GetGenerationConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateGenerationConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/UpdateGenerationConfig',
            conversation__pb2.UpdateGenerationConfigRequest.SerializeToString,
            conversation__pb2.UpdateGenerationConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteGenerationConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/DeleteGenerationConfig',
            conversation__pb2.DeleteGenerationConfigRequest.SerializeToString,
            conversation__pb2.DeleteGenerationConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListGenerationConfigs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/ListGenerationConfigs',
            conversation__pb2.ListGenerationConfigsRequest.SerializeToString,
            conversation__pb2.ListGenerationConfigsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateEmotion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/CreateEmotion',
            conversation__pb2.CreateEmotionRequest.SerializeToString,
            conversation__pb2.CreateEmotionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEmotion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/GetEmotion',
            conversation__pb2.GetEmotionRequest.SerializeToString,
            conversation__pb2.GetEmotionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateEmotion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/UpdateEmotion',
            conversation__pb2.UpdateEmotionRequest.SerializeToString,
            conversation__pb2.UpdateEmotionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteEmotion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/DeleteEmotion',
            conversation__pb2.DeleteEmotionRequest.SerializeToString,
            conversation__pb2.DeleteEmotionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListEmotions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conversation.ChatService/ListEmotions',
            conversation__pb2.ListEmotionsRequest.SerializeToString,
            conversation__pb2.ListEmotionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
